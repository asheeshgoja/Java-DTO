//Auto generated code
//Code generated by XXsd2Code<http://xxsd2code.sourceforge.net/> XXsd2Code.exe version 1.0.0
//For any comments/suggestions contact code generator author at asheesh.goja@gmail.com
//Auto generated code
//Auto generated code
 
using System;
using System.Collections.Generic;
 
 
using CustomerOrderAndFulfillment.CommonSchemaElements;
 
 
namespace CustomerOrderAndFulfillment
{
	namespace Contract
	{
 
		//enumeration	CreditRating
		public enum	CreditRating
		{
			[System.Xml.Serialization.XmlEnum(Name = "700")] Good = 700,
			[System.Xml.Serialization.XmlEnum(Name = "750")] VeryGood = 750,
			[System.Xml.Serialization.XmlEnum(Name = "790")] ExtremelyGood = 790,
			[System.Xml.Serialization.XmlEnum(Name = "300")] Poor = 300
			
		}
 
		//enumeration	FuzzyCondition
		public enum	FuzzyCondition
		{
			[System.Xml.Serialization.XmlEnum(Name = "100")] Hot = 100,
			[System.Xml.Serialization.XmlEnum(Name = "200")] VeryHot = 200,
			[System.Xml.Serialization.XmlEnum(Name = "300")] ExtremelyHot = 300,
			[System.Xml.Serialization.XmlEnum(Name = "0")] Cold = 0
			
		}
 
		[Serializable]
		public class	FulfillmentRecord : ICloneable
		{
			public	string			FulfillmentRecordID;
			public	bool IsBackOrder; 
			public	FuzzyCondition			StorageTemperature;
			public	string			CustomerOrderNo;
			
			//default constructor
			public	FulfillmentRecord()
			{
				FulfillmentRecordID = String.Empty;
				IsBackOrder = false ;
				StorageTemperature = CustomerOrderAndFulfillment.Contract.FuzzyCondition.Hot ;
				CustomerOrderNo = String.Empty;
			}
			
			//IClonable Override
			public	virtual	object Clone()
			{
				FulfillmentRecord	 instance = new FulfillmentRecord() ;
				instance.FulfillmentRecordID = FulfillmentRecordID ;
				instance.IsBackOrder = IsBackOrder ;
				instance.StorageTemperature = StorageTemperature ;
				instance.CustomerOrderNo = CustomerOrderNo ;
				return instance;
			}
			
			//DeepCopy
			public	void DeepCopy(FulfillmentRecord from)
			{
				FulfillmentRecordID = from.FulfillmentRecordID ;
				IsBackOrder = from.IsBackOrder ;
				StorageTemperature = from.StorageTemperature ;
				CustomerOrderNo = from.CustomerOrderNo ;
			}
			
		}
 
		[Serializable]
		public class	CustomerOrder : ICloneable
		{
			public	string			OrderNumber;
			public	CreditRating			Rating;
			public	CustomerOrderAndFulfillment.CommonSchemaElements.Address			AddressInfo;

			public	List<CustomerOrderAndFulfillment.CommonSchemaElements.OrderItem>	Orders;
			public	CustomerOrderAndFulfillment.CommonSchemaElements.CreditCardDetails			CcInfo;
			
			//default constructor
			public	CustomerOrder()
			{
				OrderNumber = String.Empty;
				Rating = CustomerOrderAndFulfillment.Contract.CreditRating.Good ;
				AddressInfo = new CustomerOrderAndFulfillment.CommonSchemaElements.Address() ;
				Orders = new List<CustomerOrderAndFulfillment.CommonSchemaElements.OrderItem>() ;
				CcInfo = new CustomerOrderAndFulfillment.CommonSchemaElements.CreditCardDetails() ;
			}
			
			//IClonable Override
			public	virtual	object Clone()
			{
				CustomerOrder	 instance = new CustomerOrder() ;
				instance.OrderNumber = OrderNumber ;
				instance.Rating = Rating ;
				instance.AddressInfo = (CustomerOrderAndFulfillment.CommonSchemaElements.Address)AddressInfo.Clone() ;
				instance.Orders.AddRange(Orders) ;
				instance.CcInfo = (CustomerOrderAndFulfillment.CommonSchemaElements.CreditCardDetails)CcInfo.Clone() ;
				return instance;
			}
			
			//DeepCopy
			public	void DeepCopy(CustomerOrder from)
			{
				OrderNumber = from.OrderNumber ;
				Rating = from.Rating ;
				AddressInfo.DeepCopy(from.AddressInfo) ;
				Orders.AddRange(from.Orders) ;
				CcInfo.DeepCopy(from.CcInfo) ;
			}
			
		}
	}
}


